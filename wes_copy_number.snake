import subprocess
import pandas as pd

pair_annot = pd.read_csv(config["pair_annotation"], sep="\t")
pair_annot.index = pair_annot["first_id"]
samples = list(pair_annot.index)

sample_annot = pd.read_csv(config["sample_annotation"], sep="\t")
sample_annot.index = sample_annot["sample_id"]

def sex(sample_id):
	"""Get biological sex of patient from whom the sample was taken"""
	return sample_annot.loc[sample_id, "sex"]

def bam_path(sample_id):
	"""Get bam file path of sample"""
	return sample_annot.loc[sample_id, "clean_bam_file_capture"]

def	second_id(first_id):
	"""Get the second sample of a pair"""
	return pair_annot.loc[first_id, 'second_id']



rule all:
	input:
		expand("acapseg/{sample_name}.AllelicCapseg.rds", sample_name=samples)

rule gatk4cnv:
	input:
		sample_bam = "bam/{sample_name}.bam",
		sample_bai = "bam/{sample_name}.bai",
		ref_fasta = config["gatk4cnv"]["ref_fasta"],
		targets_bed = config["gatk4cnv"]["targets_bed"],
		pon = lambda x: config["gatk4cnv"]["pon"][sex(x.sample_name)]
	params:
		sample_name = "{sample_name}"
	output:
		seg = "gatk4cnv/cbs_seg/{sample_name}.seg",
		copy_ratio = "gatk4cnv/tumor_pcov/{sample_name}.tn.tsv",	
	shell:
		"""
		mkdir -p gatk4cnv/samples
		echo '{input.sample_bam}' > gatk4cnv/samples/{params.sample_name}.txt
		gatk4cnv \
			-i gatk4cnv/samples/{params.sample_name}.txt \
			--reference {input.ref_fasta} \
			--intervalfile {input.targets_bed} \
			--padding {config[gatk4cnv][padding]} \
			--keepdups \
			--ponfile {input.pon} \
			--isnotusingponweights \
			--rawcov \
			--outputdir gatk4cnv \
			--log_directory gatk4cnv/log
		"""
	
rule mutect_pair:
	input:
		tumor_bam = "bam/{sample_name}.bam",
		normal_bam = lambda x: "bam/{0}.bam".format(second_id(x.sample_name)),
		tumor_bai = "bam/{sample_name}.bai",
		normal_bai = lambda x: "bam/{0}.bai".format(second_id(x.sample_name)),
	params:
		tumor_name = "{sample_name}",
		normal_name = lambda x: second_id(x.sample_name),
	output: 
		callstats = "mutect/{sample_name}.callstats.txt",
		coverage = "mutect/{sample_name}.coverage.wig.txt",
		power = "mutect/{sample_name}.power.wig.txt",
	version:
		subprocess.check_output("mutect --version", shell=True)
	shell:
		"""
		mkdir -p mutect/log
		mutect \
			--analysis_type 'MuTect' \
			--tumor_sample_name {params.tumor_name} \
			--normal_sample_name {params.normal_name} \
			-I:tumor {input.tumor_bam} \
			-I:normal {input.normal_bam} \
			--reference_sequence {config[mutect_pair][ref_fasta]} \
			--intervals {config[mutect_pair][interval_list]} \
			--dbsnp {config[mutect_pair][dbsnp]} \
			--cosmic {config[mutect_pair][cosmic]} \
			--normal_panel {config[mutect_pair][normal_panel]} \
			--out {output.callstats} \
			--coverage_file {output.coverage} \
			--power_file {output.power} \
			--downsample_to_coverage 100000 \
			--enable_extended_output \
			--fraction_contamination 0.001 \
			2>&1 | tee mutect/log/{params.tumor_name}.log
		"""
	
# select tumor SNVs that occur at normal heterozygous sites
rule select_normal_het_sites:
	input:
		callstats = rules.mutect_pair.output.callstats
	params:
		sample_name = "{sample_name}",
	output:
		ghet_callstats = "snv_ghet/{sample_name}_ghet.callstats.txt"
	shell:
		"""
		mkdir -p snv_ghet/log
		callstats_ghet-filter.r {input} {output} \
			2>&1 | tee snv_ghet/{params.sample_name}_ghet.callstats.log
		"""

rule convert_callstats_to_cov:
	input:
		callstats = "{path}/{sample_name}.callstats.txt"
	output:
		cov = "{path}/{sample_name}.cov"
	shell:	
		"callstats2cov.r {input} --output {output}"

rule allelic_capseg:
	input:
		seg = rules.gatk4cnv.output.seg,
		copy_ratio = rules.gatk4cnv.output.copy_ratio,
		cov = "snv_ghet/{sample_name}_ghet.cov",
	params:
		sample_name = "{sample_name}"
	output:
		rds = "acapseg/{sample_name}.AllelicCapseg.rds",
		tsv = "acapseg/results/{sample_name}.tsv",
	shell:
		"""
		mkdir -p acapseg/log
		acapseg.r \
			--SID {params.sample_name} \
			--capseg.probe.fn {input.copy_ratio} \
			--capseg.seg.fn {input.seg} \
			--germline.het.fn {input.cov} \
			--base.output.dir acapseg
			2>&1 | tee acapseg/log/{params.sample_name}.log
		"""

